class Solution {
    public boolean checkPartitioning(String s) {
        int n = s.length();
        boolean[][] isPalindrome = new boolean[n][n];

        // Build the palindrome matrix
        for (int len = 1; len <= n; len++) {
            for (int start = 0; start <= n - len; start++) {
                int end = start + len - 1;
                isPalindrome[start][end] = (s.charAt(start) == s.charAt(end)) && (len <= 2 || isPalindrome[start + 1][end - 1]);
            }
        }

        // Check if it's possible to split into three palindromic substrings
        for (int i = 1; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isPalindrome[0][i - 1] && isPalindrome[i][j - 1] && isPalindrome[j][n - 1]) {
                    return true;
                }
            }
        }

        return false;
    }
}
