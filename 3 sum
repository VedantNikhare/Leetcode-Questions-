class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       List<List<Integer>> triplets = new ArrayList<>();
        Arrays.sort(nums); // Sort the array for efficient two-pointer approach

        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            int left = i + 1, right = nums.length - 1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum == 0) {
                    triplets.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    right--;
                    // Skip duplicates for the second and third elements

                    
while (left < right && nums[left] == nums[left - 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right + 1]) {
                        right--;
                    }
                } else
 
if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return triplets; 
    }
}
