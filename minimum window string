import java.util.HashMap;
import java.util.Map;

class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0) {
            return "";
        }

        // Use a hashmap to track the frequency of characters in t
        Map<Character, Integer> targetMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }

        int left = 0;
        int right = 0;
        int requiredChars = targetMap.size(); // Number of unique characters in t
        int formedChars = 0; // Number of characters formed in the window that are in t

        // Use another hashmap to track the frequency of characters in the current window
        Map<Character, Integer> windowMap = new HashMap<>();
        
        // Variables to keep track of the minimum window substring
        int minLen = Integer.MAX_VALUE;
        int minLeft = 0;
        int minRight = 0;

        while (right < s.length()) {
            char currentChar = s.charAt(right);
            windowMap.put(currentChar, windowMap.getOrDefault(currentChar, 0) + 1);

            if (targetMap.containsKey(currentChar) && windowMap.get(currentChar).equals(targetMap.get(currentChar))) {
                formedChars++;
            }

            // Try to minimize the window by moving the left pointer
            while (left <= right && formedChars == requiredChars) {
                int currentLen = right - left + 1;

                if (currentLen < minLen) {
                    minLen = currentLen;
                    minLeft = left;
                    minRight = right + 1;
                }

                char leftChar = s.charAt(left);
                windowMap.put(leftChar, windowMap.get(leftChar) - 1);

                if (targetMap.containsKey(leftChar) && windowMap.get(leftChar) < targetMap.get(leftChar)) {
                    formedChars--;
                }

                left++;
            }

            right++;
        }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minRight);
    }
}
