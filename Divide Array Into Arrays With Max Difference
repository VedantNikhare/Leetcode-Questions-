import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public int[][] divideArray(int[] nums, int k) {
        int n = nums.length;
        Arrays.sort(nums);

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currentArray = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (currentArray.size() == 0 || Math.abs(nums[i] - currentArray.get(currentArray.size() - 1)) <= k) {
                currentArray.add(nums[i]);
                if (currentArray.size() == 3) {
                    result.add(new ArrayList<>(currentArray));
                    currentArray.clear();
                }
            } else {
                // If the condition is not met, it's impossible to divide the array
                return new int[][]{};
            }
        }

        // Check if there is any remaining element in the currentArray
        if (!currentArray.isEmpty()) {
            return new int[][]{};
        }

        // Convert List of Lists to a 2D array
        int[][] resultArray = new int[result.size()][3];
        for (int i = 0; i < result.size(); i++) {
            for (int j = 0; j < 3; j++) {
                resultArray[i][j] = result.get(i).get(j);
            }
        }

        return resultArray;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums1 = {1, 3, 4, 8, 7, 9, 3, 5, 1};
        int k1 = 2;
        int[][] result1 = solution.divideArray(nums1, k1);
        System.out.println(Arrays.deepToString(result1));

        int[] nums2 = {1, 3, 3, 2, 7, 3};
        int k2 = 3;
        int[][] result2 = solution.divideArray(nums2, k2);
        System.out.println(Arrays.deepToString(result2));
    }
}
